{# iterate_list apic.tenants name item[2] #}
{% set tenant = ((apic | default()) | community.general.json_query('tenants[?name==`' ~ item[2] ~ '`]'))[0] %}
{
    "fvTenant": {
        "attributes": {
            "dn": "uni/tn-{{ tenant.name }}",
            "name": "{{ tenant.name }}"
        },
        "children": [
            {%- set comma1 = joiner(",") %}
            {%- for bd in tenant.bridge_domains | default([]) %}{{ comma1() }}
            {%- set bd_name = bd.name ~ defaults.apic.tenants.bridge_domains.name_suffix  %}
            {%- set bd_move_detection = "" %}
            {%- if bd.ep_move_detection is defined and bd.ep_move_detection | cisco.aac.aac_bool("enabled") == "enabled" %}
                {%- set bd_move_detection = "garp" %}
            {%- endif %}
            {
                "fvBD": {
                    "attributes": {
                        "annotation": "orchestrator:aac",
                        "arpFlood": "{{ bd.arp_flooding | default(defaults.apic.tenants.bridge_domains.arp_flooding) | cisco.aac.aac_bool("yes") }}",
                        "descr": "{{ bd.description | default() }}",
                        "dn": "uni/tn-{{ tenant.name }}/BD-{{ bd_name }}",
                        "hostBasedRouting": "{{ bd.advertise_host_routes | default(defaults.apic.tenants.bridge_domains.advertise_host_routes) | cisco.aac.aac_bool("yes") }}",
                        "ipLearning": "{{ bd.ip_dataplane_learning | default(defaults.apic.tenants.bridge_domains.ip_dataplane_learning) | cisco.aac.aac_bool("yes") }}",
                        "limitIpLearnToSubnets": "{{ bd.limit_ip_learn_to_subnets | default(defaults.apic.tenants.bridge_domains.limit_ip_learn_to_subnets) | cisco.aac.aac_bool("yes") }}",
                        "mac": "{{ bd.mac | default(defaults.apic.tenants.bridge_domains.mac) }}",
                        "epMoveDetectMode": "{{ bd_move_detection }}",
                        "vmac": "{{ bd.virtual_mac | default() }}",
                        "mcastAllow": "{{ bd.l3_multicast | default(defaults.apic.tenants.bridge_domains.l3_multicast) | cisco.aac.aac_bool("yes") }}",
                        "multiDstPktAct": "{{ bd.multi_destination_flooding | default(defaults.apic.tenants.bridge_domains.multi_destination_flooding) }}",
                        "name": "{{ bd_name }}",
                        "nameAlias": "{{ bd.alias | default() }}",
                        "type": "regular",
                        "unicastRoute": "{{ bd.unicast_routing | default(defaults.apic.tenants.bridge_domains.unicast_routing) | cisco.aac.aac_bool("yes") }}",
                        "unkMacUcastAct": "{{ bd.unknown_unicast | default(defaults.apic.tenants.bridge_domains.unknown_unicast) }}",
                        "unkMcastAct": "{{ bd.unknown_ipv4_multicast | default(defaults.apic.tenants.bridge_domains.unknown_ipv4_multicast) }}",
                        "v6unkMcastAct": "{{ bd.unknown_ipv6_multicast | default(defaults.apic.tenants.bridge_domains.unknown_ipv6_multicast) }}",
                        "childAction": "deleteNonPresent"
                    },
                    "children": [
                        {%- set comma2 = joiner(",") %}
                        {%- for dhcp_label in bd.dhcp_labels | default([]) %}{{ comma2() }}
                        {% set dhcp_relay_policy_name = dhcp_label.dhcp_relay_policy ~ defaults.apic.tenants.policies.dhcp_relay_policies.name_suffix %}
                        {             
                            "dhcpLbl": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "dn": "uni/tn-{{ tenant.name }}/BD-{{ bd_name }}/dhcplbl-{{ dhcp_relay_policy_name }}",
                                    "owner": "tenant",
                                    "name": "{{ dhcp_relay_policy_name }}"
                                },
                                "children": [
                                    {% if dhcp_label.dhcp_option_policy is defined %}
                                    {% set dhcp_option_policy_name = dhcp_label.dhcp_option_policy | default() ~ defaults.apic.tenants.policies.dhcp_option_policies.name_suffix %}
                                    {
                                        "dhcpRsDhcpOptionPol": {
                                            "attributes": {
                                                "annotation": "orchestrator:aac",
                                                "tnDhcpOptionPolName": "{{ dhcp_option_policy_name }}"
                                            }
                                        }
                                    }
                                    {% endif %}
                                ]
                            }
                        }
                        {%- endfor %}
                        {%- for subnet in bd.subnets | default([]) %}{{ comma2() }}
                        {% set scope = [] %}
                        {% if subnet.public | default(defaults.apic.tenants.bridge_domains.subnets.public) | cisco.aac.aac_bool("yes") == "yes" %}{% set scope = scope + [("public")] %}{% endif %}
                        {% if subnet.private | default(defaults.apic.tenants.bridge_domains.subnets.private) | cisco.aac.aac_bool("yes") == "yes" %}{% set scope = scope + [("private")] %}{% endif %}
                        {% if subnet.shared | default(defaults.apic.tenants.bridge_domains.subnets.shared) | cisco.aac.aac_bool("yes") == "yes" %}{% set scope = scope + [("shared")] %}{% endif %}
                        {% set ctrl = [] %}
                        {% if subnet.igmp_querier | default(defaults.apic.tenants.bridge_domains.subnets.igmp_querier) | cisco.aac.aac_bool("yes") == "yes" %}{% set ctrl = ctrl + [("querier")] %}{% endif %}
                        {% if subnet.nd_ra_prefix | default(defaults.apic.tenants.bridge_domains.subnets.nd_ra_prefix) | cisco.aac.aac_bool("yes") == "yes" %}{% set ctrl = ctrl + [("nd")] %}{% endif %}
                        {% if subnet.no_default_gateway | default(defaults.apic.tenants.bridge_domains.subnets.no_default_gateway) | cisco.aac.aac_bool("yes") == "yes" %}{% set ctrl = ctrl + [("no-default-gateway")] %}{% endif %}
                        {
                            "fvSubnet": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "ctrl": "{{ ctrl | join(',') }}",
                                    "descr": "{{ subnet.description | default() }}",
                                    "dn": "uni/tn-{{ tenant.name }}/BD-{{ bd_name }}/subnet-[{{ subnet.ip }}]",
                                    "ip": "{{ subnet.ip }}",
                                    "preferred": "{{ subnet.primary_ip | default(defaults.apic.tenants.bridge_domains.subnets.primary_ip) | cisco.aac.aac_bool("yes") }}",
                                    "scope": "{{ scope | join(',') }}",
                                    "virtual": "{{ subnet.virtual | default(defaults.apic.tenants.bridge_domains.subnets.virtual) | cisco.aac.aac_bool("yes") }}"
                                }
                            }
                        }
                        {%- endfor %}
                        {%- for l3out in bd.l3outs | default([]) %}{{ comma2() }}
                        {% set l3out_name = l3out ~ defaults.apic.tenants.l3outs.name_suffix %}
                        {
                            "fvRsBDToOut": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "tnL3extOutName": "{{ l3out_name }}"
                                }
                            }
                        }
                        {%- endfor %}{{ comma2() }}
                        {% set vrf_name = bd.vrf ~ ('' if bd.vrf in ('inb', 'obb', 'overlay-1') else defaults.apic.tenants.vrfs.name_suffix) %}
                        {
                            "fvRsCtx": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "tnFvCtxName": "{{ vrf_name }}"
                                }
                            }
                        }
                        {% if bd.igmp_interface_policy is defined %}{{ comma2() }}
                        {% set igmp_interface_policy_name = bd.igmp_interface_policy ~ defaults.apic.tenants.policies.igmp_interface_policies.name_suffix %}
                        {
                            "igmpIfP": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "childAction": "deleteNonPresent"
                                },
                                "children": [
                                    {
                                        "igmpRsIfPol": {
                                            "attributes": {
                                                "annotation": "orchestrator:aac",
                                                "tDn": "uni/tn-{{ tenant.name }}/igmpIfPol-{{ igmp_interface_policy_name }}"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                        {% endif %}
                        {% if bd.igmp_snooping_policy is defined %}{{ comma2() }}
                        {% set igmp_snooping_policy_name = bd.igmp_snooping_policy ~ defaults.apic.tenants.policies.igmp_snooping_policies.name_suffix %}
                        {
                            "fvRsIgmpsn": {
                                "attributes": {
                                    "annotation": "orchestrator:aac",
                                    "tnIgmpSnoopPolName": "{{ igmp_snooping_policy_name }}"
                                }
                            }
                        }
                        {% endif %}

                    ]
                }
            }
            {%- endfor %}

        ]
    }
}
