---
mso: include('mso', required=False)
---
mso:
  version: str(required=False)
  bootstrap: include('bootstrap', required=False)
  system_config: include('system_config', required=False)
  remote_locations: list(include('remote_locations'), required=False)
  tacacs_providers: list(include('tacacs_providers'), required=False)
  login_domains: list(include('login_domains'), required=False) # @ref_name(Login Domain)
  ca_certificates: list(include('ca_certificates'), required=False)
  users: list(include('users'), required=False) # @ref_name(User) @key(username)
  sites: list(include('sites'), required=False) # @ref_name(Site)
  fabric_connectivity: include('fabric_connectivity', required=False)
  tenants: list(include('tenants'), required=False) # @ref_name(Tenant)
  policies: include('policies', required=False)
  schemas: list(include('schemas'), required=False) # @ref_name(Schema)

bootstrap:
  admin_username: str(required=False)
  admin_password: any(str(), null())
  keyring: include('bootstrap_keyring', required=False)

bootstrap_keyring:
  name: str()
  description: str(required=False)
  ca_name: str(required=False)
  certificate: str()
  private_key: str()

system_config:
  lockout_time: int(min=0, required=False)
  allowed_consecutive_attempts: int(min=0, required=False)
  banner: include('sc_banner', required=False)

sc_banner:
  alias: str(required=False)
  type: enum('informational', 'warning', 'critical', required=False)
  message: str(required=False)
  state: enum('active', 'inactive', required=False)

remote_locations:
  name: str()
  description: str(required=False)
  hostname_ip: str()
  port: int(min=0, max=65535, required=False)
  protocol: enum('scp', 'sftp', required=False)
  path: str(required=False)
  authentication: enum('password', 'sshKey', required=False)
  username: str(required=False)
  password: any(str(), null(), required=False)
  ssh_key: any(str(), null(), required=False)
  passphrase: any(str(), null(), required=False)

tacacs_providers:
  hostname_ip: str()
  description: str(required=False)
  shared_secret: any(str(), null(), required=False)
  port: int(min=0, max=65535, required=False)
  protocol: enum('pap', 'chap', required=False)
  timeout: int(min=0, required=False)
  retries: int(min=0, required=False)

login_domains:
  name: str()
  description: str(required=False)
  realm: enum('tacacs', 'local')
  status: enum('active', 'inactive', required=False)
  default: bool(required=False)
  providers: list(include('login_domains_provider'), required=False) # @name(Login Domain Providers)

login_domains_provider:
  hostname_ip: str()
  priority: int(min=0, required=False)

ca_certificates:
  name: str()
  description: str(required=False)
  public_key: str()

users:
  username: str()
  password: any(str(), null())
  first_name: str()
  last_name: str()
  email_address: str()
  phone_number: str(min=10, max=20, required=False)
  status: enum('active', 'inactive', required=False)
  roles: list(include('users_roles'), required=False) # @name(User Roles) @ref_name(Role)

users_roles:
  role: str()
  access: enum('readWrite', 'readOnly', required=False)

sites:
  name: str()
  apic_urls: list(str()) # @ref_name(URL)
  username: str()
  password: any(str(), null())
  id: int(min=1, required=False)
  location: include('sites_location', required=False) # @flatten()
  multisite: enum('enabled', 'disabled', required=False)
  multicast_tep: ip(required=False)
  bgp: include('sites_bgp', required=False) # @flatten()
  ospf: include('sites_ospf', required=False) # @flatten()
  routed_domain: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False)
  ospf_policies: list(include('sites_ospf_policies'), required=False) # @ref_name(OSPF Policy)
  pods: list(include('sites_pods'), required=False) # @ref_name(Pod) @key(id)

sites_location:
  long: str() # @name(Location Long)
  lat: str() # @name(Location Lat)

sites_bgp:
  as: int(min=1, max=4294967295, required=False) # @name(BGP AS)
  password: any(str(), null(), required=False) # @name(BGP Password)

sites_ospf:
  area_id: int(min=0, max=4294967295, required=False) # @name(OSPF Area ID)
  area_type: enum('regular', 'stub', 'nssa', required=False) # @name(OSPF Area Type)

sites_ospf_policies:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  network_type: enum('point-to-point', 'broadcast', required=False)
  priority: int(min=0, max=255, required=False)
  interface_cost: int(min=0, max=65535, required=False)
  passive_interface: enum('enabled', 'disabled', required=False)
  mtu_ignore: enum('enabled', 'disabled', required=False)
  advertise_subnet: enum('enabled', 'disabled', required=False)
  bfd: enum('enabled', 'disabled', required=False)
  hello_interval: int(min=1, max=65535, required=False)
  dead_interval: int(min=1, max=65535, required=False)
  retransmit_interval: int(min=1, max=65535, required=False)
  retransmit_delay: int(min=1, max=450, required=False)

sites_pods:
  id: int(min=1, max=255)
  unicast_tep: ip(required=False)
  spines: list(include('sites_pods_spines'), required=False) # @ref_name(Spine) @key(id)

sites_pods_spines:
  id: int(min=1, max=4000)
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  bgp_peering: enum('enabled', 'disabled', required=False)
  bgp_route_reflector: enum('enabled', 'disabled', required=False)
  control_plane_tep: ip(required=False)
  interfaces: list(include('sites_pods_spines_interfaces'), required=False)

sites_pods_spines_interfaces:
  port: int(min=1, max=127)
  module: int(min=1, max=9, required=False)
  ip: ip()
  mtu: any(enum('inherit'), int(min=576, max=9216), required=False)
  ospf: include('sites_pods_spines_interfaces_ospf', required=False) # @flatten()

sites_pods_spines_interfaces_ospf:
  policy: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(OSPF Policy)
  authentication_type: enum('none', 'simple', 'md5', required=False) # @name(OSPF Authentication Type)
  authentication_key: any(str(), null(), required=False) # @name(OSPF Authentication Key)
  authentication_key_id: int(min=1, max=255, required=False) # @name(OSPF Authentication Key ID)

fabric_connectivity:
  bgp: include('fc_bgp', required=False) # @flatten()

fc_bgp:
  peering_type: enum('full-mesh', 'route-reflector', required=False) # @name(BGP Peering Type)
  ttl: int(min=1, max=255, required=False) # @name(BGP TTL)
  max_as: int(min=0, max=2000, required=False) # @name(BGP Max AS)
  keepalive_interval: int(min=0, max=3600, required=False) # @name(BGP Keepalive Interval)
  hold_interval: int(min=0, max=3600, required=False) # @name(BGP Hold Interval)
  stale_interval: int(min=1, max=3600, required=False) # @name(BGP Stale Interval)
  graceful_restart: enum('enabled', 'disabled', required=False) # @name(BGP Graceful Restart)

tenants:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  sites: list(include('tenants_sites'), required=False) # @name(Tenant Sites)
  users: list(include('tenants_users'), required=False) # @name(Tenant Users)

tenants_sites:
  name: str() # @ref_table(mso.sites)
  azure_subscription_id: str(required=False)
  azure_shared_tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)

tenants_users:
  name: str()
  domain: str(required=False)

policies:
  dhcp_relays: list(include('policies_dhcp_relays'), required=False) # @name(DHCP Relay Policies) @ref_name(DHCP Relay Policy)
  dhcp_options: list(include('policies_dhcp_options'), required=False) # @name(DHCP Option Policies) @ref_name(DHCP Option Policy)

policies_dhcp_relays:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(mso.tenants)
  providers: list(include('policies_dhcp_relays_providers'), required=False) # @name(DHCP Relay Policy Providers)

policies_dhcp_relays_providers:
  ip: ip()
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(mso.tenants)
  schema: str() # @ref_table(mso.schemas)
  template: str() # @ref_table(schemas.templates)
  application_profile: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(schemas_templates.application_profiles)
  endpoint_group: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(schemas_templates.endpoint_groups)
  external_endpoint_group: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(schemas_templates.external_endpoint_groups)

policies_dhcp_options:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(mso.tenants)
  options: list(include('policies_dhcp_options_options'), required=False) # @name(DHCP Option Policy Options)

policies_dhcp_options_options:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  id: int(min=1)
  data: str()

schemas:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  templates: list(include('schemas_templates'), required=False) # @ref_name(Template)

schemas_templates:
  name: str()
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(mso.tenants)
  application_profiles: list(include('t_application_profiles'), required=False) # @ref_name(Application Profile)
  vrfs: list(include('t_vrfs'), required=False) # @ref_name(VRF)
  bridge_domains: list(include('t_bridge_domains'), required=False) # @ref_name(Bridge Domain)
  filters: list(include('t_filters'), required=False) # @ref_name(Filter)
  contracts: list(include('t_contracts'), required=False) # @ref_name(Contract)
  l3outs: list(include('t_l3outs'), required=False) # @ref_name(L3out)
  external_endpoint_groups: list(include('t_external_endpoint_groups'), required=False) # @name(External EPGs) @ref_name(External EPG)
  service_graphs: list(include('t_service_graphs'), required=False) # @ref_name(Service Graph)
  sites: list(str(), required=False) # @name(Template Sites) @ref_name(Site)

t_application_profiles:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  endpoint_groups: list(include('t_ap_endpoint_groups'), required=False) # @name(EPGs) @ref_name(EPG)

t_ap_endpoint_groups:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  useg: enum('enabled', 'disabled', required=False)
  intra_epg_isolation: enum('enabled', 'disabled', required=False)
  proxy_arp: enum('enabled', 'disabled', required=False)
  preferred_group: enum('enabled', 'disabled', required=False)
  bridge_domain: include('t_ap_epg_bridge_domain', required=False) # @flatten() @description(Required for On-Premises)
  vrf: include('t_ap_epg_vrf', required=False) # @flatten() @description(Required for Cloud)
  subnets: list(include('t_ap_epg_subnets'), required=False) # @name(EPG Subnets) @ref_name(Subnet)
  contracts: include('t_ap_epg_contracts', required=False) # @flatten()
  sites: list(include('t_ap_epg_sites'), required=False) # @name(EPG Sites) @ref_name(Site)

t_ap_epg_bridge_domain:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(Bridge Domain Name) @ref_table(schemas_templates.bridge_domains) @description(Required for On-Premises)
  schema: str(required=False) # @name(Bridge Domain Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(Bridge Domain Template) @ref_table(schemas.templates)

t_ap_epg_vrf:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(VRF Name) @ref_table(schemas_templates.vrfs) @description(Required for Cloud)
  schema: str(required=False) # @name(VRF Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(VRF Template) @ref_table(schemas.templates)

t_ap_epg_subnets:
  ip: ip()
  scope: enum('private', 'public', required=False)
  shared: enum('enabled', 'disabled', required=False)
  no_default_gateway: enum('enabled', 'disabled', required=False)
  primary: enum('enabled', 'disabled', required=False)

t_ap_epg_contracts:
  consumers: list(include('t_ap_epg_contracts_consumers'), required=False) # @name(EPG Consumers)
  providers: list(include('t_ap_epg_contracts_providers'), required=False) # @name(EPG Providers)

t_ap_epg_contracts_consumers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_ap_epg_contracts_providers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_ap_epg_sites:
  name: str() # @ref_table(mso.sites)
  physical_domains: list(include('t_ap_epg_sites_physical_domains'), required=False) # @name(EPG Physical Domains)
  vmware_vmm_domains: list(include('t_ap_epg_sites_vmware_vmm_domains'), required=False) # @name(EPG VMware VMM Domains)
  static_ports: list(include('t_ap_epg_sites_static_ports'), required=False) # @name(EPG Static Ports)
  static_leafs: list(include('t_ap_epg_sites_static_leafs'), required=False) # @name(EPG Static Leafs)
  subnets: list(include('t_ap_epg_sites_subnets'), required=False) # @name(EPG Site Subnets)
  selectors: list(include('t_ap_epg_sites_selectors'), required=False) # @name(EPG Selectors) @ref_name(Selector) @description(Cloud only)

t_ap_epg_sites_physical_domains:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  deployment_immediacy: enum('immediate', 'lazy', required=False)
  resolution_immediacy: enum('immediate', 'lazy', 'pre-provision', required=False)

t_ap_epg_sites_vmware_vmm_domains:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  deployment_immediacy: enum('immediate', 'lazy', required=False)
  resolution_immediacy: enum('immediate', 'lazy', 'pre-provision', required=False)
  vlan_mode: enum('static', 'dynamic', required=False)
  vlan: int(min=1, max=4096, required=False)
  u_segmentation: enum('enabled', 'disabled', required=False)
  useg_vlan: int(min=1, max=4096, required=False)

t_ap_epg_sites_static_ports:
  type: enum('port', 'vpc', 'pc', required=False)
  pod: int(min=1, max=255, required=False)
  node: int(min=1, max=4000, required=False)
  fex: int(min=101, max=199, required=False)
  node_1: int(min=1, max=4000, required=False)
  node_2: int(min=1, max=4000, required=False)
  port: int(min=1, max=127, required=False)
  module: int(min=1, max=9, required=False)
  channel: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False)
  vlan: int(min=1, max=4096)
  useg_vlan: int(min=1, max=4096, required=False)
  deployment_immediacy: enum('immediate', 'lazy', required=False)
  mode: enum('regular', 'native', 'untagged', required=False)

t_ap_epg_sites_static_leafs:
  pod: int(min=1, max=255, required=False)
  node: int(min=1, max=4000)
  vlan: int(min=1, max=4096)

t_ap_epg_sites_subnets:
  ip: ip()
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  scope: enum('private', 'public', required=False)
  shared: enum('enabled', 'disabled', required=False)
  no_default_gateway: enum('enabled', 'disabled', required=False)
  primary: enum('enabled', 'disabled', required=False)

t_ap_epg_sites_selectors:
  name: str()
  expressions: list(include('t_ap_epg_sites_selectors_expressions'), required=False) # @name(EPG Selector Expressions)

t_ap_epg_sites_selectors_expressions:
  key: enum('ipAddress', 'region')
  operator: enum('equals', 'notEquals')
  value: str()

t_vrfs:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  l3_multicast: enum('enabled', 'disabled', required=False)
  vzany: enum('enabled', 'disabled', required=False)
  preferred_group: enum('enabled', 'disabled', required=False)
  sites: list(include('t_vrf_sites'), required=False) # @name(VRF Sites) @ref_name(Site)
  contracts: include('t_vrfs_contracts', required=False) # @flatten()

t_vrfs_contracts:
  consumers: list(include('t_vrfs_contracts_consumers'), required=False) # @name(VRF Consumers)
  providers: list(include('t_vrfs_contracts_providers'), required=False) # @name(VRF Providers)

t_vrfs_contracts_consumers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_vrfs_contracts_providers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_vrf_sites:
  name: str() # @ref_table(mso.sites)
  regions: list(include('t_vrf_sites_regions'), required=False) # @name(VRF Regions) @ref_name(Region)

t_vrf_sites_regions:
  name: str()
  hub_network: enum('enabled', 'disabled', required=False)
  hub_network_name: str(required=False)
  hub_network_tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)
  vpn_gateway: enum('enabled', 'disabled', required=False)
  cidrs: list(include('t_vrf_sites_regions_cidrs'), required=False) # @name(VRF Region CIDRs) @ref_name(CIDR)

t_vrf_sites_regions_cidrs:
  ip: ip()
  subnets: list(include('t_vrf_sites_regions_cidrs_subnets'), required=False) # @name(VRF Region CIDR Subnet)

t_vrf_sites_regions_cidrs_subnets:
  ip: ip()
  zone: str(required=False)
  name: str(required=False)

t_bridge_domains:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  l2_unknown_unicast: enum('proxy', 'flood', required=False)
  intersite_bum_traffic: enum('enabled', 'disabled', required=False)
  optimize_wan_bandwidth: enum('enabled', 'disabled', required=False)
  l2_stretch: enum('enabled', 'disabled', required=False)
  unicast_routing: enum('enabled', 'disabled', required=False)
  arp_flooding: enum('enabled', 'disabled', required=False)
  l3_multicast: enum('enabled', 'disabled', required=False)
  vrf: include('t_bd_vrf') # @flatten()
  subnets: list(include('t_bd_subnets'), required=False) # @name(Bridge Domain Subnets)
  sites: list(include('t_bd_sites'), required=False) # @name(Bridge Domain Sites) @ref_name(Site)
  dhcp_policies: list(include('t_bd_dhcp_policies'), required=False)
  dhcp_relay_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(policies.dhcp_relays)
  dhcp_option_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(policies.dhcp_options)

t_bd_vrf:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(VRF Name) @ref_table(schemas_templates.vrfs)
  schema: str(required=False) # @name(VRF Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(VRF Template) @ref_table(schemas.templates)

t_bd_subnets:
  ip: ip()
  scope: enum('private', 'public', required=False)
  shared: enum('enabled', 'disabled', required=False)
  querier: enum('enabled', 'disabled', required=False)
  primary: enum('enabled', 'disabled', required=False)

t_bd_dhcp_policies:
  dhcp_relay_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(policies.dhcp_relays)
  dhcp_option_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(policies.dhcp_options)

t_bd_sites:
  name: str() # @ref_table(mso.sites)
  advertise_host_routes: enum('enabled', 'disabled', required=False)
  subnets: list(include('t_bd_subnets'), required=False) # @name(Bridge Domain Site Subnets)
  l3outs: list(regex('^[a-zA-Z0-9_.:-]{1,64}$'), required=False) # @name(Bridge Domain Site L3outs) @ref_name(L3out) # @ref_table(schemas_templates.l3outs)
  mac: mac(required=False)
t_filters:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  entries: list(include('t_filters_entries'), required=False) # @name(Filter Entries)

t_filters_entries:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  ethertype: enum('unspecified', 'ipv4', 'trill', 'arp', 'ipv6', 'mpls_ucast', 'mac_security', 'fcoe', 'ip', required=False)
  protocol: any(int(min=0, max=255), enum('unspecified', 'icmp', 'igmp', 'tcp', 'egp', 'igp', 'udp', 'icmpv6', 'eigrp', 'ospfigp', 'pim', 'l2tp'), required=False)
  source_from_port: any(int(min=0, max=65535), enum('unspecified'), required=False)
  source_to_port: any(int(min=0, max=65535), enum('unspecified'), required=False)
  destination_from_port: any(int(min=0, max=65535), enum('unspecified'), required=False)
  destination_to_port: any(int(min=0, max=65535), enum('unspecified'), required=False)
  stateful: enum('enabled', 'disabled', required=False)

t_l3outs:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  vrf: include('t_l3outs_vrf') # @flatten()

t_l3outs_vrf:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(VRF Name) @ref_table(schemas_templates.vrfs)
  schema: str(required=False) # @name(VRF Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(VRF Template) @ref_table(schemas.templates)

t_external_endpoint_groups:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  type: enum('on-premise', 'cloud', required=False)
  preferred_group: enum('enabled', 'disabled', required=False)
  vrf: include('t_eepg_vrf') # @flatten()
  l3out: include('t_eepg_l3out', required=False) # @flatten()
  application_profile: include('t_eepg_ap', required=False) # @flatten()
  subnets: list(include('t_eepg_subnet'), required=False) # @name(External EPG Subnets)
  contracts: include('t_eepg_contracts', required=False) # @flatten()
  selectors: list(include('t_eepg_selectors'), required=False) # @name(External EPG Selectors) @ref_name(Selector)
  sites: list(include('t_eepg_sites'), required=False) # @name(External EPG Sites) @ref_name(Site)

t_eepg_vrf:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(VRF Name) # @ref_table(schemas_templates.vrfs)
  schema: str(required=False) # @name(VRF Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(VRF Template) @ref_table(schemas.templates)

t_eepg_l3out:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(L3out Name) # @ref_table(schemas_templates.l3outs)
  schema: str(required=False) # @name(L3out Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(L3out Template) @ref_table(schemas.templates)

t_eepg_ap:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(Application Profile Name) # @ref_table(schemas_templates.application_profiles)
  schema: str(required=False) # @name(Application Profile Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(Application Profile Template) @ref_table(schemas.templates)

t_eepg_subnet:
  prefix: ip()
  import_route_control: enum('yes', 'no', required=False)
  export_route_control: enum('yes', 'no', required=False)
  shared_route_control: enum('yes', 'no', required=False)
  import_security: enum('yes', 'no', required=False)
  shared_security: enum('yes', 'no', required=False)
  aggregate_import: enum('yes', 'no', required=False)
  aggregate_export: enum('yes', 'no', required=False)
  aggregate_shared: enum('yes', 'no', required=False)

t_eepg_contracts:
  consumers: list(include('t_eepg_contracts_consumers'), required=False) # @name(External EPG Consumers)
  providers: list(include('t_eepg_contracts_providers'), required=False) # @name(External EPG Providers)

t_eepg_contracts_consumers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_eepg_contracts_providers:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.contracts)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)

t_eepg_selectors:
  name: str()
  ips: list(ip()) # @name(External EPG Selector IPs) @ref_name(IP)

t_eepg_sites:
  name: str() # @ref_table(mso.sites)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)
  l3out: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(schemas_templates.l3outs)
  route_reachability: enum('internet', 'site-ext', required=False)
  selectors: list(include('t_eepg_sites_selectors'), required=False) # @name(External EPG Site Selectors) @ref_name(Selector)

t_eepg_sites_selectors:
  name: str()
  ips: list(ip()) # @name(External EPG Site Selector IPs) @ref_name(IP)

t_contracts:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  scope: enum('application-profile', 'tenant', 'context', 'global', required=False)
  type: enum('bothWay', 'oneWay', required=False)
  filters: list(include('t_contracts_filters'), required=False) # @name(Contract BiDir Filters)
  provider_to_consumer_filters: list(include('t_contracts_filters'), required=False) # @name(Contract Prov-Con Filters)
  consumer_to_provider_filters: list(include('t_contracts_filters'), required=False) # @name(Contract Con-Prov Filters)
  service_graph: include('t_contracts_service_graph', required=False) # @flatten()

t_contracts_filters:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @ref_table(schemas_templates.filters)
  schema: str(required=False) # @ref_table(mso.schemas)
  template: str(required=False) # @ref_table(schemas.templates)
  log: enum('enabled', 'disabled', required=False)

t_contracts_service_graph:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(Service Graph Name)
  schema: str(required=False) # @name(Service Graph Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(Service Graph Template) @ref_table(schemas.templates)
  nodes: list(include('t_contracts_service_graph_nodes')) # @name(Contract Service Graph Nodes) @ref_name(Node)

t_contracts_service_graph_nodes:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  provider: include('t_contracts_service_graph_nodes_prov') # @flatten()
  consumer: include('t_contracts_service_graph_nodes_con') # @flatten()

t_contracts_service_graph_nodes_prov:
  bridge_domain: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(Provider Bridge Domain Name) @ref_table(schemas_templates.bridge_domains)
  schema: str(required=False) # @name(Provider Bridge Domain Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(Provider Bridge Domain Template) @ref_table(schemas.templates)
  sites: list(include('t_contracts_service_graph_nodes_prov_sites')) # @name(Contract SG Node Provider Sites)

t_contracts_service_graph_nodes_prov_sites:
  name: str() # @ref_table(mso.sites)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)
  device: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  logical_interface: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  redirect_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$')

t_contracts_service_graph_nodes_con:
  bridge_domain: regex('^[a-zA-Z0-9_.:-]{1,64}$') # @name(Consumer Bridge Domain Name)
  schema: str(required=False) # @name(Consumer Bridge Domain Schema) @ref_table(mso.schemas)
  template: str(required=False) # @name(Consumer Bridge Domain Template) @ref_table(schemas.templates)
  sites: list(include('t_contracts_service_graph_nodes_con_sites')) # @name(Contract SG Node Consumer Sites)

t_contracts_service_graph_nodes_con_sites:
  name: str() # @ref_table(mso.sites)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)
  device: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  logical_interface: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  redirect_policy: regex('^[a-zA-Z0-9_.:-]{1,64}$')

t_service_graphs:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  description: regex('^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$', required=False)
  nodes: list(include('t_service_graphs_nodes')) # @name(Service Graph Nodes) @ref_name(Node)

t_service_graphs_nodes:
  name: regex('^[a-zA-Z0-9_.:-]{1,64}$')
  sites: list(include('t_service_graphs_nodes_sites')) # @name(Service Graph Node Sites)

t_service_graphs_nodes_sites:
  name: str() # @ref_table(mso.sites)
  tenant: regex('^[a-zA-Z0-9_.:-]{1,64}$', required=False) # @ref_table(mso.tenants)
  device: regex('^[a-zA-Z0-9_.:-]{1,64}$')
